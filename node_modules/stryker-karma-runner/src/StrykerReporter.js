"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var test_runner_1 = require("stryker-api/test_runner");
var events_1 = require("events");
/**
 * This is a singleton implementation of a KarmaReporter.
 * It is loaded by
 */
var StrykerReporter = /** @class */ (function (_super) {
    tslib_1.__extends(StrykerReporter, _super);
    function StrykerReporter() {
        var _this = _super.call(this) || this;
        _this.adapters = [];
        return _this;
    }
    Object.defineProperty(StrykerReporter, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new StrykerReporter();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    StrykerReporter.prototype.onSpecComplete = function (browser, spec) {
        var name = spec.suite.reduce(function (name, suite) { return name + suite + ' '; }, '') + spec.description;
        var status = test_runner_1.TestStatus.Failed;
        if (spec.skipped) {
            status = test_runner_1.TestStatus.Skipped;
        }
        else if (spec.success) {
            status = test_runner_1.TestStatus.Success;
        }
        var testResult = {
            name: name,
            status: status,
            timeSpentMs: spec.time,
            failureMessages: spec.log
        };
        this.emit('test_result', testResult);
    };
    StrykerReporter.prototype.onRunComplete = function (runResult) {
        this.emit('run_complete', this.collectRunState(runResult));
    };
    StrykerReporter.prototype.onBrowserComplete = function (browser, result) {
        this.emit('coverage_report', result.coverage);
    };
    StrykerReporter.prototype.onBrowsersReady = function () {
        this.emit('browsers_ready');
    };
    StrykerReporter.prototype.onBrowserError = function (browser, error) {
        // Karma 2.0 has different error messages
        if (error.message) {
            this.emit('browser_error', error.message);
        }
        else {
            this.emit('browser_error', error.toString());
        }
    };
    StrykerReporter.prototype.onCompileError = function (errors) {
        // This is called from angular cli logic
        // https://github.com/angular/angular-cli/blob/012672161087a05ae5ecffbed5d1ee307ce1e0ad/packages/angular_devkit/build_angular/src/angular-cli-files/plugins/karma.ts#L96
        this.emit('compile_error', errors);
    };
    StrykerReporter.prototype.collectRunState = function (runResult) {
        if (runResult.disconnected) {
            return test_runner_1.RunStatus.Timeout;
        }
        else if (runResult.error) {
            return test_runner_1.RunStatus.Error;
        }
        else {
            return test_runner_1.RunStatus.Complete;
        }
    };
    StrykerReporter._instance = new StrykerReporter();
    return StrykerReporter;
}(events_1.EventEmitter));
exports.default = StrykerReporter;
//# sourceMappingURL=StrykerReporter.js.map