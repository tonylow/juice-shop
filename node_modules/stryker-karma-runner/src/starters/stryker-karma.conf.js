"use strict";
var path = require("path");
var utils_1 = require("../utils");
var TestHooksMiddleware_1 = require("../TestHooksMiddleware");
var StrykerReporter_1 = require("../StrykerReporter");
var logging_1 = require("stryker-api/logging");
function setDefaultOptions(config) {
    config.set({
        browsers: ['PhantomJS'],
        frameworks: ['jasmine']
    });
}
function setUserKarmaConfigFile(config, log) {
    if (globalSettings.karmaConfigFile && typeof globalSettings.karmaConfigFile === 'string') {
        var configFileName = path.resolve(globalSettings.karmaConfigFile);
        log.info('Importing config from "%s"', configFileName);
        try {
            var userConfig = utils_1.requireModule(configFileName);
            userConfig(config);
            config.configFile = configFileName; // override config to ensure karma is as user-like as possible
        }
        catch (error) {
            log.error("Could not read karma configuration from " + globalSettings.karmaConfigFile + ".", error);
        }
    }
}
/**
 * Sets configuration that is needed to control the karma life cycle. Namely it shouldn't watch files and not quit after first test run.
 * @param config The config to use
 */
function setLifeCycleOptions(config) {
    config.set({
        // Override browserNoActivityTimeout. Default value 10000 might not enough to send perTest coverage results
        browserNoActivityTimeout: 1000000,
        // No auto watch, stryker will inform us when we need to test
        autoWatch: false,
        // Don't stop after first run
        singleRun: false,
        // Never detach, always run in this same process (is already a separate process)
        detached: false
    });
}
function setPort(config) {
    config.set({
        port: globalSettings.port
    });
}
function setUserKarmaConfig(config) {
    if (globalSettings.karmaConfig) {
        config.set(globalSettings.karmaConfig);
    }
}
function setBasePath(config) {
    if (!config.basePath) {
        // We need to set the base path, so karma won't use this file to base everything of
        if (globalSettings.karmaConfigFile) {
            config.basePath = path.resolve(path.dirname(globalSettings.karmaConfigFile));
        }
        else {
            config.basePath = process.cwd();
        }
    }
}
function addPlugin(karmaConfig, karmaPlugin) {
    karmaConfig.plugins = karmaConfig.plugins || ['karma-*'];
    karmaConfig.plugins.push(karmaPlugin);
}
/**
 * Configures the test hooks middleware.
 * It adds a non-existing file to the top `files` array.
 * Further more it configures a middleware that serves the file.
 */
function configureTestHooksMiddleware(config) {
    var _a;
    // Add test run middleware file
    config.files = config.files || [];
    config.files.unshift({ pattern: TestHooksMiddleware_1.TEST_HOOKS_FILE_NAME, included: true, watched: false, served: false, nocache: true }); // Add a custom hooks file to provide hooks
    var middleware = config.middleware || (config.middleware = []);
    middleware.unshift(TestHooksMiddleware_1.default.name);
    addPlugin(config, (_a = {}, _a["middleware:" + TestHooksMiddleware_1.default.name] = ['value', TestHooksMiddleware_1.default.instance.handler], _a));
}
function configureStrykerReporter(config) {
    var _a;
    addPlugin(config, (_a = {}, _a["reporter:" + StrykerReporter_1.default.name] = ['value', StrykerReporter_1.default.instance], _a));
    if (!config.reporters) {
        config.reporters = [];
    }
    config.reporters.push(StrykerReporter_1.default.name);
}
var globalSettings = {};
module.exports = Object.assign(function (config) {
    var log = logging_1.getLogger(path.basename(__filename));
    setDefaultOptions(config);
    setUserKarmaConfigFile(config, log);
    setUserKarmaConfig(config);
    setBasePath(config);
    setLifeCycleOptions(config);
    setPort(config);
    configureTestHooksMiddleware(config);
    configureStrykerReporter(config);
}, {
    /**
     * Provide global settings for next configuration
     * This is the only way we can pass through any values between the `KarmaTestRunner` and the stryker-karma.conf file.
     * (not counting environment variables)
    */
    setGlobals: function (globals) {
        globalSettings.port = globals.port;
        globalSettings.karmaConfig = globals.karmaConfig;
        globalSettings.karmaConfigFile = globals.karmaConfigFile;
    }
});
//# sourceMappingURL=stryker-karma.conf.js.map