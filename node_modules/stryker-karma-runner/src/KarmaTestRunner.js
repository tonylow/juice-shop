"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var test_runner_1 = require("stryker-api/test_runner");
var logging_1 = require("stryker-api/logging");
var karma = require("karma");
var StrykerKarmaSetup_1 = require("./StrykerKarmaSetup");
var TestHooksMiddleware_1 = require("./TestHooksMiddleware");
var StrykerReporter_1 = require("./StrykerReporter");
var strykerKarmaConf = require("./starters/stryker-karma.conf");
var ProjectStarter_1 = require("./starters/ProjectStarter");
var KarmaTestRunner = /** @class */ (function () {
    function KarmaTestRunner(options) {
        this.options = options;
        this.log = logging_1.getLogger(KarmaTestRunner.name);
        this.testHooksMiddleware = TestHooksMiddleware_1.default.instance;
        var setup = this.loadSetup(options);
        this.starter = new ProjectStarter_1.default(setup.project);
        this.setGlobals(setup, options.port);
        this.cleanRun();
        this.listenToRunComplete();
        this.listenToSpecComplete();
        this.listenToCoverage();
        this.listenToError();
    }
    KarmaTestRunner.prototype.init = function () {
        var _this = this;
        return new Promise(function (res, rej) {
            StrykerReporter_1.default.instance.once('browsers_ready', res);
            _this.starter.start()
                .then(function () { })
                .catch(rej);
        });
    };
    KarmaTestRunner.prototype.run = function (_a) {
        var testHooks = _a.testHooks;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var runResult;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.testHooksMiddleware.currentTestHooks = testHooks || '';
                        if (!(this.currentRunStatus !== test_runner_1.RunStatus.Error)) return [3 /*break*/, 2];
                        // Only run when there was no compile error
                        // An compile error can happen in case of angular-cli
                        return [4 /*yield*/, this.runServer()];
                    case 1:
                        // Only run when there was no compile error
                        // An compile error can happen in case of angular-cli
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        runResult = this.collectRunResult();
                        this.cleanRun();
                        return [2 /*return*/, runResult];
                }
            });
        });
    };
    KarmaTestRunner.prototype.loadSetup = function (settings) {
        var _this = this;
        var defaultKarmaConfig = {
            project: 'custom'
        };
        var strykerKarmaSetup = Object.assign(defaultKarmaConfig, settings.strykerOptions[StrykerKarmaSetup_1.KARMA_CONFIG_KEY]);
        var loadDeprecatedOption = function (configKey, deprecatedConfigOption) {
            if (!strykerKarmaSetup[configKey] && settings.strykerOptions[deprecatedConfigOption]) {
                _this.log.warn("[deprecated]: config option " + deprecatedConfigOption + " is renamed to " + StrykerKarmaSetup_1.KARMA_CONFIG_KEY + "." + configKey);
                strykerKarmaSetup[configKey] = settings.strykerOptions[deprecatedConfigOption];
            }
        };
        loadDeprecatedOption('configFile', StrykerKarmaSetup_1.DEPRECATED_KARMA_CONFIG_FILE);
        loadDeprecatedOption('config', StrykerKarmaSetup_1.DEPRECATED_KARMA_CONFIG);
        return strykerKarmaSetup;
    };
    KarmaTestRunner.prototype.setGlobals = function (setup, port) {
        strykerKarmaConf.setGlobals({
            port: port,
            karmaConfig: setup.config,
            karmaConfigFile: setup.configFile
        });
    };
    KarmaTestRunner.prototype.cleanRun = function () {
        this.currentTestResults = [];
        this.currentErrorMessages = [];
        this.currentCoverageReport = undefined;
        this.currentRunStatus = test_runner_1.RunStatus.Complete;
    };
    // Don't use dispose() to stop karma (using karma.stopper.stop)
    // It only works when in `detached` mode, as specified here: http://karma-runner.github.io/1.0/config/configuration-file.html
    KarmaTestRunner.prototype.listenToSpecComplete = function () {
        var _this = this;
        StrykerReporter_1.default.instance.on('test_result', function (testResult) {
            _this.currentTestResults.push(testResult);
        });
    };
    KarmaTestRunner.prototype.listenToCoverage = function () {
        var _this = this;
        StrykerReporter_1.default.instance.on('coverage_report', function (coverageReport) {
            _this.currentCoverageReport = coverageReport;
        });
    };
    KarmaTestRunner.prototype.listenToRunComplete = function () {
        var _this = this;
        StrykerReporter_1.default.instance.on('run_complete', function (runStatus) {
            _this.currentRunStatus = runStatus;
        });
    };
    KarmaTestRunner.prototype.listenToError = function () {
        var _this = this;
        StrykerReporter_1.default.instance.on('browser_error', function (error) {
            _this.currentErrorMessages.push(error);
        });
        StrykerReporter_1.default.instance.on('compile_error', function (errors) {
            errors.forEach(function (error) { return _this.currentErrorMessages.push(error); });
            _this.currentRunStatus = test_runner_1.RunStatus.Error;
        });
    };
    KarmaTestRunner.prototype.runServer = function () {
        var _this = this;
        return new Promise(function (resolve) {
            karma.runner.run({ port: _this.options.port }, function (exitCode) {
                _this.log.debug('karma run done with ', exitCode);
                resolve();
            });
        });
    };
    KarmaTestRunner.prototype.collectRunResult = function () {
        return {
            tests: this.currentTestResults,
            status: this.determineRunState(),
            coverage: this.currentCoverageReport,
            errorMessages: this.currentErrorMessages
        };
    };
    KarmaTestRunner.prototype.determineRunState = function () {
        // Karma will report an Error if no tests had executed. 
        // This is not an "error" in Stryker terms
        if (this.currentRunStatus === test_runner_1.RunStatus.Error &&
            !this.currentErrorMessages.length &&
            !this.currentTestResults.length) {
            return test_runner_1.RunStatus.Complete;
        }
        else if (this.currentErrorMessages.length) {
            // Karma will return Complete when there are runtime errors
            return test_runner_1.RunStatus.Error;
        }
        else {
            return this.currentRunStatus;
        }
    };
    return KarmaTestRunner;
}());
exports.default = KarmaTestRunner;
//# sourceMappingURL=KarmaTestRunner.js.map