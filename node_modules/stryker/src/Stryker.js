"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var logging_1 = require("stryker-api/logging");
var config_1 = require("stryker-api/config");
var ReporterOrchestrator_1 = require("./ReporterOrchestrator");
var TestFrameworkOrchestrator_1 = require("./TestFrameworkOrchestrator");
var MutantTestMatcher_1 = require("./MutantTestMatcher");
var InputFileResolver_1 = require("./input/InputFileResolver");
var ConfigReader_1 = require("./config/ConfigReader");
var PluginLoader_1 = require("./PluginLoader");
var ScoreResultCalculator_1 = require("./ScoreResultCalculator");
var ConfigValidator_1 = require("./config/ConfigValidator");
var objectUtils_1 = require("./utils/objectUtils");
var TempFolder_1 = require("./utils/TempFolder");
var Timer_1 = require("./utils/Timer");
var MutatorFacade_1 = require("./MutatorFacade");
var InitialTestExecutor_1 = require("./process/InitialTestExecutor");
var MutationTestExecutor_1 = require("./process/MutationTestExecutor");
var LogConfigurator_1 = require("./logging/LogConfigurator");
var Stryker = /** @class */ (function () {
    /**
     * The Stryker mutation tester.
     * @constructor
     * @param {Object} [options] - Optional options.
     */
    function Stryker(options) {
        this.timer = new Timer_1.default();
        LogConfigurator_1.default.configureMainProcess(options.logLevel, options.fileLogLevel);
        this.log = logging_1.getLogger(Stryker.name);
        var configReader = new ConfigReader_1.default(options);
        this.config = configReader.readConfig();
        LogConfigurator_1.default.configureMainProcess(this.config.logLevel, this.config.fileLogLevel); // logLevel could be changed
        this.loadPlugins();
        this.applyConfigEditors();
        LogConfigurator_1.default.configureMainProcess(this.config.logLevel, this.config.fileLogLevel); // logLevel could be changed
        this.freezeConfig();
        this.reporter = new ReporterOrchestrator_1.default(this.config).createBroadcastReporter();
        this.testFramework = new TestFrameworkOrchestrator_1.default(this.config).determineTestFramework();
        new ConfigValidator_1.default(this.config, this.testFramework).validate();
    }
    Stryker.prototype.runMutationTest = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var loggingContext, inputFiles, initialTestRunProcess, initialTestRunResult, testableMutants, mutationTestExecutor, mutantResults;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LogConfigurator_1.default.configureLoggingServer(this.config.logLevel, this.config.fileLogLevel)];
                    case 1:
                        loggingContext = _a.sent();
                        this.timer.reset();
                        return [4 /*yield*/, new InputFileResolver_1.default(this.config.mutate, this.config.files, this.reporter).resolve()];
                    case 2:
                        inputFiles = _a.sent();
                        if (!inputFiles.files.length) return [3 /*break*/, 10];
                        TempFolder_1.TempFolder.instance().initialize();
                        initialTestRunProcess = new InitialTestExecutor_1.default(this.config, inputFiles, this.testFramework, this.timer, loggingContext);
                        return [4 /*yield*/, initialTestRunProcess.run()];
                    case 3:
                        initialTestRunResult = _a.sent();
                        return [4 /*yield*/, this.mutate(inputFiles, initialTestRunResult)];
                    case 4:
                        testableMutants = _a.sent();
                        if (!(initialTestRunResult.runResult.tests.length && testableMutants.length)) return [3 /*break*/, 10];
                        mutationTestExecutor = new MutationTestExecutor_1.default(this.config, inputFiles.files, this.testFramework, this.reporter, initialTestRunResult.overheadTimeMS, loggingContext);
                        return [4 /*yield*/, mutationTestExecutor.run(testableMutants)];
                    case 5:
                        mutantResults = _a.sent();
                        this.reportScore(mutantResults);
                        return [4 /*yield*/, this.wrapUpReporter()];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, TempFolder_1.TempFolder.instance().clean()];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.logDone()];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, LogConfigurator_1.default.shutdown()];
                    case 9:
                        _a.sent();
                        return [2 /*return*/, mutantResults];
                    case 10: return [2 /*return*/, Promise.resolve([])];
                }
            });
        });
    };
    Stryker.prototype.mutate = function (input, initialTestRunResult) {
        var mutator = new MutatorFacade_1.default(this.config);
        var allMutants = mutator.mutate(input.filesToMutate);
        var includedMutants = this.removeExcludedMutants(allMutants);
        this.logMutantCount(includedMutants.length, allMutants.length);
        var mutantRunResultMatcher = new MutantTestMatcher_1.default(includedMutants, input.filesToMutate, initialTestRunResult.runResult, initialTestRunResult.sourceMapper, initialTestRunResult.coverageMaps, this.config, this.reporter);
        return mutantRunResultMatcher.matchWithMutants();
    };
    Stryker.prototype.logMutantCount = function (includedMutantCount, totalMutantCount) {
        var mutantCountMessage;
        if (includedMutantCount) {
            mutantCountMessage = includedMutantCount + " Mutant(s) generated";
        }
        else {
            mutantCountMessage = "It's a mutant-free world, nothing to test.";
        }
        var numberExcluded = totalMutantCount - includedMutantCount;
        if (numberExcluded) {
            mutantCountMessage += " (" + numberExcluded + " Mutant(s) excluded)";
        }
        this.log.info(mutantCountMessage);
    };
    Stryker.prototype.removeExcludedMutants = function (mutants) {
        if (typeof this.config.mutator === 'string') {
            return mutants;
        }
        else {
            var mutatorDescriptor_1 = this.config.mutator;
            return mutants.filter(function (mutant) { return mutatorDescriptor_1.excludedMutations.indexOf(mutant.mutatorName) === -1; });
        }
    };
    Stryker.prototype.loadPlugins = function () {
        if (this.config.plugins) {
            new PluginLoader_1.default(this.config.plugins).load();
        }
    };
    Stryker.prototype.wrapUpReporter = function () {
        var maybePromise = this.reporter.wrapUp();
        if (objectUtils_1.isPromise(maybePromise)) {
            return maybePromise;
        }
        else {
            return Promise.resolve();
        }
    };
    Stryker.prototype.applyConfigEditors = function () {
        var _this = this;
        config_1.ConfigEditorFactory.instance().knownNames().forEach(function (configEditorName) {
            config_1.ConfigEditorFactory.instance().create(configEditorName, undefined).edit(_this.config);
        });
    };
    Stryker.prototype.freezeConfig = function () {
        // A config class instance is not serializable using surrial.
        // This is a temporary work around
        // See https://github.com/stryker-mutator/stryker/issues/365
        var config = {};
        for (var prop in this.config) {
            config[prop] = this.config[prop];
        }
        this.config = objectUtils_1.freezeRecursively(config);
        if (this.log.isDebugEnabled()) {
            this.log.debug("Using config: " + JSON.stringify(this.config));
        }
    };
    Stryker.prototype.logDone = function () {
        this.log.info('Done in %s.', this.timer.humanReadableElapsed());
    };
    Stryker.prototype.reportScore = function (mutantResults) {
        var calculator = new ScoreResultCalculator_1.default();
        var score = calculator.calculate(mutantResults);
        this.reporter.onScoreCalculated(score);
        calculator.determineExitCode(score, this.config.thresholds);
    };
    return Stryker;
}());
exports.default = Stryker;
//# sourceMappingURL=Stryker.js.map